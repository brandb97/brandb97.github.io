import{j as e,c as m,r,H as j,F as p}from"./Footer-BCDbRi8S.js";import{C as c,B as u,u as g}from"./CodeBox-DHD9yWMe.js";import{w as d}from"./working-hard-NgNEVRNp.js";/* empty css              */function b(){return e.jsxs("div",{className:"content",children:[e.jsx("code",{className:"usage",children:"exec [-cl] [-a name] [command [arguments]]"}),e.jsx("p",{className:"description",children:"exec命令用来执行一个新的命令，并替换当前的shell进程。想想你用execv系统调用做了什么，exec命令会做同样的事情。"}),e.jsx("p",{className:"description",children:"也许你想问，什么时候使用exec命令呢？通常在你想要结束shell脚本时使用， 比如下面使用exec的写法："}),e.jsx(c,{code:`if [ -x /usr/bin/your-command ]
then
    exec /usr/bin/your-command
fi`,language:"bash"}),e.jsx("p",{className:"description",children:"可以比不使用exec的写法："}),e.jsx(c,{code:`if [ -x /usr/bin/your-command ]
then
    /usr/bin/your-command
    exit $?
fi`,language:"bash"}),e.jsx("p",{className:"description",children:"少写一条exit命令。在shell脚本的最后一条语句前加上exec还有一个好处，就是可以让shell少执行一次fork系统调用（但是谁会关心shell的性能）。"}),e.jsx("p",{className:"description",children:"exec的另一个常用的功能是重定位标准输入、输出和错误流。比如："}),e.jsx(c,{code:`exec 1> /tmp/output.txt # 重定向标准输出到文件
# 此时执行ls会将输出写入/tmp/output.txt
exec 1>&2 # 重定向标准输出到标准错误`,language:"bash"})]})}function N(){return e.jsxs("div",{className:"content",children:[e.jsx("code",{className:"usage",children:"hash [-r] [-p filename] [-dt] [name]"}),e.jsx("p",{className:"description",children:"hash命令用来缓存命令的路径，以加快后续的查找速度。试试下面这段代码："}),e.jsx(c,{code:`$ hash ls
$ hash -t ls
/bin/ls`,language:"bash"}),e.jsxs("p",{className:"description",children:["这段代码首先使用",e.jsx("code",{children:"hash"}),"命令从",e.jsx("code",{children:"$PATH"}),"中找到+缓存了",e.jsx("code",{children:"ls"}),"命令的路径。如果你想知道hash缓存的命令路径，可以使用",e.jsx("code",{children:"hash -t"}),"命令查看。在我的电脑上，",e.jsx("code",{children:"hash"}),"缓存的",e.jsx("code",{children:"ls"}),"路径是",e.jsx("code",{children:"/bin/ls"}),"。也许你觉得这没什么用处（为什么我要关心shell的性能？），不过另一个hash有用的选项是"]}),e.jsx("code",{className:"usage",children:"hash -p /path/to/you/command command"}),e.jsx("p",{className:"description",children:"这个选项可以让你指定一个命令的路径，并将其缓存起来。例如，如果你想让shell使用你自定义的ls命令，可以这样做："}),e.jsx("code",{className:"usage",children:"hash -p /home/mike/bin/ls ls"}),e.jsxs("p",{className:"description",children:["而不需要",e.jsx("code",{children:"export PATH=/home/mike/bin:$PATH"}),"。只需一条hash命令，之后每次ls命令都会使用/home/mike/bin/ls这个路径，非常方便。"]}),e.jsxs("p",{className:"description",children:["除了缓存命令，你还可以用",e.jsx("code",{children:"hash -r"}),"清除所有缓存的命令路径，或者",e.jsx("code",{children:"hash -d command"}),"清除一个缓存。"]})]})}function f(){return e.jsx(e.Fragment,{children:e.jsxs("div",{className:"content",children:[e.jsx("p",{className:"description",children:"你也许会问什么是任务管理？任务管理是指你可以在shell中启动进程，杀死进程，等待进程，挂起进程等等。换句话说，你可以管理你创建的进程。"}),e.jsx("p",{className:"description",children:"管理进程的命令有：jobs，列出进程信息；kill，向进程发送信号；wait，等待进程终止；bg，前台运行进程；fg，后台运行进程；disown，分离进程；suspend，暂停（挂起）当前shell。"}),e.jsx("p",{className:"description",children:"因为这是一个tips，而不是tl;dr，介绍每个命令实在太多，这里介绍一个kill有趣的用法："}),e.jsx(c,{code:"$ kill -l",language:"bash"}),e.jsx("p",{className:"description",children:"你会看到kill可以发送的所有信号，试试下面的命令。kill -l 9表示列出9对应的信号——SIGKILL。"}),e.jsx(c,{code:`$ kill -l 9
KILL`,language:"bash"})]})})}function k(){return e.jsxs("div",{children:[e.jsx("h1",{children:"🚧 施工中... 🚧"}),e.jsx("img",{src:d,alt:"work in progress gif",className:"work-in-progress-img"})]})}function v(){return e.jsxs("div",{children:[e.jsx("h1",{children:"🚧 施工中... 🚧"}),e.jsx("img",{src:d,alt:"work in progress gif",className:"work-in-progress-img"})]})}function w(){return e.jsxs("div",{children:[e.jsx("h1",{children:"🚧 施工中... 🚧"}),e.jsx("img",{src:d,alt:"work in progress gif",className:"work-in-progress-img"})]})}const i=[{title:"exec",content:b()},{title:"hash",content:N()},{title:"任务管理",content:f()},{title:"script",content:k()},{title:"case",content:v()},{title:"$@#!?",content:w()}];function y(l){return e.jsx(e.Fragment,{children:e.jsx("aside",{children:e.jsx("ul",{className:"shell-toc",children:[{id:1,label:"exec"},{id:2,label:"hash"},{id:3,label:"任务管理"},{id:4,label:"script"},{id:5,label:"case"},{id:6,label:"$@#!?"}].map(s=>(console.log(s,l),e.jsx("li",{children:e.jsx("a",{className:l.pageId===s.id-1?"active":"",href:"/src/post/shell/ShellTips.html?id="+s.id,children:s.label})},s.id)))})})})}function $(){const[l]=g(),s=l.get("id"),[n,a]=r.useState(0),o=Math.max(0,Math.min(i.length-1,parseInt(s??"1",10)-1));r.useEffect(()=>{a(o)},[]);const{title:h,content:x}=i[n];return e.jsxs(e.Fragment,{children:[e.jsx(j,{}),e.jsxs("div",{className:"shell-layout",children:[e.jsx(y,{pageId:n}),e.jsxs("div",{className:"shell-body",children:[e.jsxs("div",{className:"warning",children:["💡请在 ",e.jsx("code",{children:"bash"})," 下执行该命令。"]}),e.jsx("h1",{children:h}),e.jsx("div",{children:x}),e.jsxs("div",{className:"button",children:[e.jsx("button",{className:"button-left",onClick:()=>a(t=>Math.max(0,t-1)),disabled:n===0,children:"上一页"}),e.jsx("button",{className:"button-right",onClick:()=>a(t=>Math.min(i.length-1,t+1)),disabled:n===i.length-1,children:"下一页"})]})]})]}),e.jsx(p,{})]})}m.createRoot(document.getElementById("root")).render(e.jsx(r.StrictMode,{children:e.jsx(u,{children:e.jsx($,{})})}));
